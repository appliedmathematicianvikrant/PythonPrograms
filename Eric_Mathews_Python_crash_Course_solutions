Chapter 1 Variables and Data types
2.1 Store a message in a varaibel and then print it.
message = "Happy New Year"
print(message)

2.2: storea a message in a varaible and print it then change its will and print the new message.

message = "Happy New Year"
print(message)

message = "Happy New year Vikrant"
print(message)

2.3   Store a person's name in a varaibel and print a message for that person.
name = "vikrant"
print("Hello" , name + "," , "would you like to learn some python today?")

2.4 Store a person's name then convert it into lowercase, upper case and title case
name = "vikrant kumar verma"
print(name.lower())
print(name.upper())
print(name.title())

2.5 print a quote in appropriate format
print('Albert Einstein once said , "A person who never made a\nmistake never tried anything new" ')

2.6 do the same exercise but store name and message in different variables and print it
name = "Albert Einstein"
quote = "A person who never made a\nmistake never tried anything new" 
print(name ,' once said' , quote)

2.7 Write a name with whitespace and then use lstrip(), rstrip() andd strip() to remove them.
name = '\n\n\t\tAlbert Einstein\t\n\n'
print(name)
print(name.lstrip())
print(name.rstrip())
print(name.strip())



2.8  Write addition, multiplication, subtraction, division to show 8
print(6 + 2)
print(4 * 2)
print(16 / 2)
print(10 - 2)


2.9  Store your favorite number in a variable adn then print a messagae regarding it
num = 100
print("one of my favorite number is", num)

2.10  Add a comment to any of the program
print(6 + 2)   # addition
print(4 * 2)   # multiplocation
print(16 / 2)
print(10 - 2)

2.11 read zen of pyhton
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!

3.1 write a list of friends list and print name of each one
friends = ["Yogendra", "Gajendara", "Ramakant"]
print( friends[0])
print( friends[1])
print(friends[2])

3.2  in the above list write a message for each for each friend by accessing its elements
friends = ["Yogendra", "Gajendara", "Ramakant"]
print("Happy Birthday " + friends[0])
print("Happy Birthday " + friends[1])
print("Happy Birthday " + friends[2])

3.3 write a list of your favorite mode of transporation along with a message
Bikes = ["Royal Enfield", "KTM "]
print("I would like to own a " + Bikes[0])
print("I would like to own a " + Bikes[1])

3.4 If you could invite anyone, living or deceased, to dinner, who 
would you invite? Make a list that includes at least three people you’d like to 
invite to dinner . Then use your list to print a message to each person, inviting 
them to dinner .
Solution: 
guests = ["Ramanujan", "Albert Einstein", "John Von Neumann"]
greeting = "Hello Mr."
message = "You are invited to my home for dinner at 8 PM tonight."
print(f'{greeting} {guests[0]} {message} ' )
print(f'{greeting} {guests[1]} {message} ' )
print(f'{greeting} {guests[2]} {message} ' )

3.5 Changing Guest List: You just heard that one of your guests can’t make the 
dinner, so you need to send out a new set of invitations . You’ll have to think of 
someone else to invite .
•	         Start with your program from Exercise 3-4 . Add a print statement at the 
end of your program stating the name of the guest who can’t make it .
•	         Modify your list, replacing the name of the guest who can’t make it with 
the name of the new person you are inviting .
•	         Print a second set of invitation messages, one for each person who is still 
in your list .
solution:

3.6  More Guests: You just found a bigger dinner table, so now more space is 
available . Think of three more guests to invite to dinner .
•	 Start with your program from Exercise 3-4 or Exercise 3-5 . Add a print 
statement to the end of your program informing people that you found a 
bigger dinner table .
•	         Use insert() to add one new guest to the beginning of your list .
•	         Use insert() to add one new guest to the middle of your list .
•	         Use append() to add one new guest to the end of your list .
•	         Print a new set of invitation messages, one for each person in your list .
solution
guests = ["Ramanujan", "Albert Einstein", "John Von Neumann"]
greeting = "Hello Mr."
message = "You are invited to my home for dinner at 8 PM tonight."
print(f'{greeting} {guests[0]} {message} ' )
print(f'{greeting} {guests[1]} {message} ' )
print(f'{greeting} {guests[2]} {message} ' )

print("Hello everybody , I just found a bigger dinner table so more guests can come")
guests.insert(0, "E.F. Codd")
print(guests)
guests.insert(2, "Feynmann")
guests.append("David Hilbert")
print(guests)

print(f'{greeting} {guests[0]} {message} ' )
print(f'{greeting} {guests[1]} {message} ' )
print(f'{greeting} {guests[2]} {message} ' )
print(f'{greeting} {guests[3]} {message} ' )
print(f'{greeting} {guests[4]} {message} ' )
print(f'{greeting} {guests[5]} {message} ' )


3.7 Shrinking Guest List: You just found out that your new dinner table won’t 
arrive in time for the dinner, and you have space for only two guests .
1 Start with your program from Exercise 3-6 . Add a new line that prints a 
message saying that you can invite only two people for dinner .
• Use pop() to remove guests from your list one at a time until only two 
names remain in your list . Each time you pop a name from your list, print 
a message to that person letting them know you’re sorry you can’t invite 
them to dinner .
•Print a message to each of the two people still on your list, letting them 
know they’re still invited .
•Use del to remove the last two names from your list, so you have an empty 
list . Print your list to make sure you actually have an empty list at the end 
of your program

solution:guests = ["Ramanujan", "Albert Einstein", "John Von Neumann"]
greeting = "Hello Mr."
message = "You are invited to my home for dinner at 8 PM tonight."
print(f'{greeting} {guests[0]} {message} ' )
print(f'{greeting} {guests[1]} {message} ' )
print(f'{greeting} {guests[2]} {message} ' )

print("Hello everybody , I just found a bigger dinner table so more guests can come")
guests.insert(0, "E.F. Codd")
print(guests)
guests.insert(2, "Feynmann")
guests.append("David Hilbert")
print(guests)

print(f'{greeting} {guests[0]} {message} ' )
print(f'{greeting} {guests[1]} {message} ' )
print(f'{greeting} {guests[2]} {message} ' )
print(f'{greeting} {guests[3]} {message} ' )
print(f'{greeting} {guests[4]} {message} ' )
print(f'{greeting} {guests[5]} {message} ' )

print("Sorry everyone I can invite only two guests")

popped = guests.pop()
print(f"Sorry Mr {popped} I can not invite you today, but I will invite you very soon." )

popped = guests.pop()
print(f"Sorry Mr {popped} I can not invite you today, but I will invite you very soon." )

popped = guests.pop()
print(f"Sorry Mr {popped} I can not invite you today, but I will invite you very soon." )

popped = guests.pop()
print(f"Sorry Mr {popped} I can not invite you today, but I will invite you very soon." )

print(guests)

print(f'{greeting} {guests[0]} {message} ' )
print(f'{greeting} {guests[1]} {message} ' )

del guests[0]
del guests[0]      # pay attention here it is not 1 but 0 because now we have onlly single element in our list.

print(guests)


3.8  Seeing the World: Think of at least five places in the world you’d like to 
visit .
•	 Store the locations in a list . Make sure the list is not in alphabetical order .
•	         Print your list in its original order . Don’t worry about printing the list neatly, 
just print it as a raw Python list .
•	         Use sorted() to print your list in alphabetical order without modifying the 
actual list .
•	         Show that your list is still in its original order by printing it .
•	         Use sorted() to print your list in reverse alphabetical order without chang- 
ing the order of the original list .
•	         Show that your list is still in its original order by printing it again .
•	         Use reverse() to change the order of your list . Print the list to show that its 
order has changed .
•	         Use reverse() to change the order of your list again . Print the list to show 
it’s back to its original order .
•	         Use sort() to change your list so it’s stored in alphabetical order . Print the 
list to show that its order has been changed .
•	         Use sort() to change your list so it’s stored in reverse alphabetical order . 
Print the list to show that its order has changed .

Solution:
places = ["Delhi", "Mumbai", "Guwahati", "Kanpur", "Lucknow"]
print(places)
print(sorted(places))
print(places)
print(sorted(places, reverse=True))

print(places)

places.reverse()
print(places)

places.sort()
print(places)

3.9  Dinner Guests: Working with one of the programs from Exercises 3-4 
through 3-7 (page 46), use len() to print a message indicating the number 
of people you are inviting to dinner .
solution:
places = ["Delhi", "Mumbai", "Guwahati", "Kanpur", "Lucknow"]

print(len(places))

chapter 4  Working with lists

4.1 : Pizzas: Think of at least three kinds of your favorite pizza . Store these 
pizza names in a list, and then use a for loop to print the name of each pizza .
•	         Modify your for loop to print a sentence using the name of the pizza 
instead of printing just the name of the pizza . For each pizza you should 
have one line of output containing a simple statement like I like pepperoni 
pizza .
•	         Add a line at the end of your program, outside the for loop, that states 
how much you like pizza . The output should consist of three or more lines 
about the kinds of pizza you like and then an additional sentence, such as 
I really love pizza!
Solution: pizzas = ["Sicilian Pizza ", "Greek Pizza ","California Pizza"]
for pizza in pizzas:
    print(pizza)
    
for pizza in pizzas:
    print(f'I like {pizza}')    

print("I rally love pizza ") 

4.2: Animals: Think of at least three different animals that have a common char- 
acteristic . Store the names of these animals in a list, and then use a for loop to 
print out the name of each animal .
•	         Modify your program to print a statement about each animal, such as 
A dog would make a great pet.
•	 Add a line at the end of your program stating what these animals have in 
common . You could print a sentence such as Any of these animals would 
make a great pet!
solution: animals = ["Lion", "Tiger", "Polar Bears"]
for animal in animals:
    print(f'{animal} is a carnivores animal.')

print("It is better to avoid any meeting with these anaimals.")

4.3 . Counting to Twenty: Use a for loop to print the numbers from 1 to 20, 
inclusive .
Solution:
for i in range(1,21):
    print(i)
    
4.4  One Million: Make a list of the numbers from one to one million, and then 
use a for loop to print the numbers .
solution:
for i in range(1,100001):
    print(i)
    
4.5 Summing a Million: Make a list of the numbers from one to one million, 
and then use min() and max() to make sure your list actually starts at one and 
ends at one million . Also, use the sum() function to see how quickly Python can 
add a million numbers .
Solution:
list = [i for  i in range(1,100001)]
print(min(list))
print(max(list))
print(sum(list))

4.6 : Odd Numbers: Use the third argument of the range() function to make a list 
of the odd numbers from 1 to 20 . Use a for loop to print each number .
solution:
for i in range(1, 20, 2):
    print(i)
    
4.7: Threes: Make a list of the multiples of 3 from 3 to 30 . Use a for loop to 
print the numbers in your list.
solution: 
Threes: Make a list of the multiples of 3 from 3 to 30 . Use a for loop to 
print the numbers in your list

4.8: Cubes: A number raised to the third power is called a cube . For example, 
the cube of 2 is written as 2**3 in Python . Make a list of the first 10 cubes (that 
is, the cube of each integer from 1 through 10), and use a for loop to print out 
the value of each cube .
solution:
cubes = []
for x in range(1,11):
    cubes.append(x ** 3)
print(cubes)    
    
4.9 Cube Comprehension: Use a list comprehension to generate a list of the 
first 10 cubes .    
cubes = [x**3 for x in range(1,11)]
print(cubes)

4.10: Slices: Using one of the programs you wrote in this chapter, add several 
lines to the end of the program that do the following:
•	         Print the message, The first three items in the list are: . Then use a slice to 
print the first three items from that program’s list .
•	         Print the message, Three items from the middle of the list are: . Use a slice 
to print three items from the middle of the list .
•	         Print the message, The last three items in the list are: . Use a slice to print 
the last three items in the list .
solution:
cubes = [x**3 for x in range(1,11)]
print(cubes)
first_three = cubes[:3]
middle_three = cubes[4:7]
last_three = cubes[-3:]
print("The first three elements in the list are")
for i in first_three:
    print(i)

print("The middle three elements in the list are")
for i in middle_three:
    print(i)

print("The last three elements in the list are")
for x in last_three:
    print(x)    

4.11: My Pizzas, Your Pizzas: Start with your program from Exercise 4-1 
(page 60) . Make a copy of the list of pizzas, and call it friend_pizzas . 
Then, do the following:
•Add a new pizza to the original list .
•Add a different pizza to the list friend_pizzas .
•Prove that you have two separate lists . Print the message, My favorite 
pizzas are:, and then use a for loop to print the first list . Print the message, 
My friend’s favorite pizzas are:, and then use a for loop to print the sec- 
ond list . Make sure each new pizza is stored in the appropriate list .
solution:
pizzas = ["Sicilian Pizza ", "Greek Pizza ","California Pizza"]
friend_pizzas = pizzas[:]

pizzas.append("Macroni pizza")
friend_pizzas.append("Chicken pizza")
print("My favorite pizzas are")
for pizza in pizzas:
    print(pizza)

print("\nMy friend's favorite pizza are")
for pizza in friend_pizzas:
    print(pizza)

4.12: 

4.13: Buffet: A buffet-style restaurant offers only five basic foods . Think of five 
simple foods, and store them in a tuple .
•	  Use a for loop to print each food the restaurant offers .
•	         Try to modify one of the items, and make sure that Python rejects the 
change .
•	         The restaurant changes its menu, replacing two of the items with different 
foods . Add a block of code that rewrites the tuple, and then use a for 
loop to print each of the items on the revised menu .

solution:
foods = ("Puri", "Matar Paneer", "Daal", "Chawal","Rayta")
for food in foods:
    print(food)
    
# foods[0] = "Roti"       modification is not allowed

foods =  ("\nRoti", "Palak Paneer", "Daal", "Chawal","Rayta")  # over writing the variable
for food in foods:
    print(food)
    
    
5.1 Conditional Tests: Write a series of conditional tests . Print a statement 
describing each test and your prediction for the results of each test . Your code 
should look something like this:
car = 'subaru'
print("Is car == 'subaru'? I predict True.")
print(car == 'subaru')
print("\nIs car == 'audi'? I predict False.")
print(car == 'audi')
•	         Look closely at your results, and make sure you understand why each line 
evaluates to True or False .
•	         Create at least 10 tests . Have at least 5 tests evaluate to True and another 
5 tests evaluate to False .

solution:


    
 
    










Chapter 8 Functions
8.1 Write a function called display_message() that prints one sen- 
tence telling everyone what you are learning about in this chapter . Call the 
function, and make sure the message displays correctly .
solution:
def display_message():
    print("I am learning about functions in this chapter")
    
display_message()    

8.2 Write a function called favorite_book() that accepts one 
parameter, title . The function should print a message, such as One of my 
favorite books is Alice in Wonderland . Call the function, making sure to 
include a book title as an argument in the function call .
solution: 
def favorite_book(title):
    print("One of my favorite book is " + title)

favorite_book("Erich mathews python crash course.")    

8.3 Write a function called make_shirt() that accepts a size and the 
text of a message that should be printed on the shirt . The function should print 
a sentence summarizing the size of the shirt and the message printed on it .
Call the function once using positional arguments to make a shirt . Call the 
function a second time using keyword arguments .
solution:
def make_shirt(size, text):
    print("The function has size", size, "with the message", text)
make_shirt(40, "Apna time ayega")   
make_shirt(size= 40, text="chill bro") 

8.4 Modify the make_shirt() function so that shirts are large 
by default with a message that reads I love Python . Make a large shirt and a 
medium shirt with the default message, and a shirt of any size with a different 
message .
solution:
def make_shirt(size, text="I love python"):
    print("The function has size", size, "with the message", text)
make_shirt(40)   
make_shirt(30)
make_shirt(size = 10, text= "shaktiman") 

8.5 Write a function called describe_city() that accepts the name of 
a city and its country . The function should print a simple sentence, such as 
Reykjavik is in Iceland . Give the parameter for the country a default value . 
Call your function for three different cities, at least one of which is not in the 
default country .
Solution: 
def describe_city(city, country = "India"):
    print(city,"is in", country)
    
describe_city("Hyderabad") 
describe_city("Mumbai")
describe_city(city = "NewYork", country="America")   
    
8.6 Write a function called city_country() that takes in the name 
of a city and its country . The function should return a string formatted like this:
"Santiago, Chile"
Call your function with at least three city-country pairs, and print the value 
that’s returned .
solution:
def city_country(city, country):
    
    return '"' + city + ',' + ' ' + country + '"'
var1 = city_country("Mumbai", "India")
var2 = city_country("Delhi", "India")
var3 = city_country("Dehradun", "India")


print(var1)
print(var2)
print(var3)

8.7  Write a function called make_album() that builds a dictionary  describing a music album . The function should take in an artist name and an  album title, and it should return a dictionary containing these two pieces of 
information . Use the function to make three dictionaries representing different 
albums . Print each return value to show that the dictionaries are storing the 
album information correctly . Add an optional parameter to make_album() that allows you to store the 
number of tracks on an album . If the calling line includes a value for the num- 
ber of tracks, add that value to the album’s dictionary . Make at least one new 
function call that includes the number of tracks on an album .

solution:
def make_album(name, title,no_tracks=''):
    dict = {"artist name": name, "album title": title}
    if no_tracks:
        dict["No of tracks"] = no_tracks
    return dict


dict1 = make_album("Altaf Raja", "pardesi")
dict2 = make_album("Himesh", "Ashik bnaya apne")
dict3 = make_album("atif", "jal")
dict4 = make_album("Lucky Ali", "O sanam", 78000)

print(dict1)
print(dict2)
print(dict3)
print(dict4)
    






















    
